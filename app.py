# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e3_IEf3mJo_0diF87dOlaACLlBwQZbkb
"""

import os
import openai
import streamlit as st

# Retrieve the API key from environment variable
api_key = os.getenv("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")
if not api_key:
    st.error("API key not found. Please set the OPENAI_API_KEY environment variable.")
    st.stop()

openai.api_key = api_key

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Function to communicate with OpenAI's GPT-3.5 model
def chat_with_gpt(messages):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.7,
        max_tokens=150,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    return response.choices[0].message["content"]

# Streamlit app layout
st.title("ChatGPT-like Chatbot")

# Display chat messages from history
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# User input
if prompt := st.chat_input("Type your message here..."):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)
    # Generate assistant response
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response = chat_with_gpt(st.session_state.messages)
            st.markdown(response)
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})
